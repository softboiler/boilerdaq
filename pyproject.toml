[build-system]
requires = ["uv-build==0.7.2"]
build-backend = "uv_build"

[project]
name = "boilerdaq"
version = "2024.1.2"
authors = [
  { name = "Blake Naccarato", email = "blake.naccarato@gmail.com" },
  { name = "Kwang Jin Kim" },
]
description = "Data acquisition for a nucleate pool boiling experimental apparatus"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
classifiers = [
  "License :: OSI Approved :: MIT License",
  # ? Also in CI (https://github.com/actions/python-versions/releases)
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  # "Programming Language :: Python :: 3.13",  # ? (via myst-nb) https://github.com/crate-py/rpds/issues/72
  # "Programming Language :: Python :: 3.14",  # ? Not yet beta (https://peps.python.org/pep-0745)
]
dependencies = [
  "boilercore>=2024.1.3",
  "libusb>=1.0.27",
  "mcculw>=1.0.0",
  "pandas[hdf5,performance]>=2.2.0",
  "pydantic>=2.9.1",
  "pyqtgraph>=0.13.3",
  "pyvisa>=1.14.1",
  "pyusb>=1.2.1",
  "pyvisa-py>=0.7.2",
  "simple-pid>=2.0.0",
  "pyvisa-sim>=0.6.0",
  "uldaq>=1.2.3",
  "zeroconf>=0.132.2",
]
[project.urls]
Changes = "https://softboiler.github.io/boilerdaq/changelog.html"
Docs = "https://softboiler.github.io/boilerdaq"
Home = "https://github.com/softboiler/boilerdaq"
Tracker = "https://github.com/softboiler/boilerdaq/issues"
[dependency-groups]
dev = [
  # ? Dev
  "debugpy>=1.8.2",
  "fawltydeps>=0.18.0",
  "pipdeptree>=2.23.0",
  "pre-commit>=4.1.0",
  "pyright>=1.1.394",
  "ruff>=0.9.3",
  "snakeviz>=2.2.0",
  "sourcery>=1.32.0",
  # ? For VSCode Jupyter notebooks and Data Wrangler
  "ipykernel>=6.29.5",
  "pandas-stubs==2.2.3.*",
  "pandas>=2.2.3",
  "pyarrow>=17.0.0",
  "pyspark>=3.5.5",
  "towncrier>=24.8.0",
  # ? Docs
  "linkify-it-py>=2.0.3",
  "myst-nb>=1.1.1",
  "numpydoc>=1.8.0",
  "sphinx-autobuild>=2024.4.16",
  "sphinx-autodoc2>=0.5.0",
  "sphinx-book-theme>=1.1.3",
  "sphinx-design>=0.6.0",
  "sphinx-thebe>=0.3.1",
  "sphinx-tippy>=0.4.3",
  "sphinx-togglebutton>=0.3.2",
  "sphinxcontrib-bibtex>=2.6.2",
  "sphinxcontrib-mermaid>=0.9.2",
  "sphinxcontrib-towncrier>=0.5.0a0",
  # ? Tests
  "pytest-cov>=5.0.0",
  "pytest-custom-exit-code>=0.3.0",
  "pytest-github-actions-annotate-failures>=0.2.0",
]

[tool.uv]
required-version = ">=0.7.2"
constraint-dependencies = [
  # ? Security
  # ? https://nvd.nist.gov/vuln/detail/CVE-2024-37891
  # ? via sphinx
  "urllib3>=2.2.2",
  # ? Intentionally don't check new dependency groups where we keep our dev deps
  # ? Avoids lots of repetition in `tool.fawltydeps.ignore_unused`
  "fawltydeps<0.19.0",
]
[tool.uv.pip]
python-version = "3.11"
[tool.uv.sources]
boilercore = { path = "packages/boilercore", editable = true }
boilerdaq-dev = { workspace = true }
boilerdaq-pipeline = { workspace = true }
[tool.uv.workspace]
members = ["packages/*"]
exclude = ["packages/boilercore"]

[tool.coverage.report]
exclude_also = ['if __name__ == "__main__":']
[tool.coverage.run]
branch = true
source = [
  "src",
  "docs",
  "packages/_dev",
  "packages/_pipeline",
  "notebooks",
  "scripts",
  "tests",
]

[tool.fawltydeps]
deps = ["pyproject.toml"]
code = ["src"]
ignore_undeclared = ["PySide6"]
ignore_unused = ["libusb", "pyusb", "pyvisa-py", "pyvisa-sim", "zeroconf"]
[tool.fawltydeps.custom_mapping]
boilercore = ["boilercore"]

[tool.pytest.ini_options]
addopts = """
  -p no:legacypaths
  -r a
  --strict-config
  --strict-markers
  --suppress-no-test-exit-code
  --color=yes
"""
cache_dir = ".cache/.pytest_cache"
markers = "slow"
testpaths = "tests"
xfail_strict = true

[tool.towncrier]
directory = "changelog"
filename = "CHANGELOG.md"
template = "changelog/towncrier_template.md.jinja"
title_format = ""
issue_format = "[#{issue}](https://github.com/softboiler/boilerdaq/issues/{issue})"
underlines = ["", "", ""]
[[tool.towncrier.section]]
path = ""
[[tool.towncrier.type]]
directory = "breaking"
name = "Backwards-incompatible changes"
showcontent = true
[[tool.towncrier.type]]
directory = "deprecation"
name = "Deprecations"
showcontent = true
[[tool.towncrier.type]]
directory = "change"
name = "Changes"
showcontent = true

[tool.pyright]
stubPath = "typings/stubs"
typeCheckingMode = "strict"
include = [
  "src",
  "docs",
  "notebooks",
  "packages/_dev",
  "packages/_pipeline",
  "scripts",
  "tests",
]
ignore = ["**/.*", "*:/**/.*", "*:/**/appdata", "typings"]
# Default "true" in strict
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
disableBytesTypePromotions = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
# Default "false" in strict
deprecateTypingAliases = false
enableExperimentalFeatures = false
# Default "warning" in strict
reportMissingModuleSource = "warning"
# Default "error" in strict
reportMissingImports = "warning"
reportInvalidTypeForm = "none"                 # Works fine in BaseModels
reportUndefinedVariable = "warning"
reportAssertAlwaysTrue = "warning"
reportInvalidStringEscapeSequence = "warning"
reportInvalidTypeVarUse = "warning"
reportMissingTypeStubs = "none"                # Overeager
reportSelfClsParameterName = "warning"
reportUnsupportedDunderAll = "warning"
reportUnusedExpression = "none"                # Handled by Ruff
reportWildcardImportFromLibrary = "warning"
reportAbstractUsage = "warning"
reportArgumentType = "warning"
reportAssertTypeFailure = "warning"
reportAssignmentType = "warning"
reportAttributeAccessIssue = "warning"
reportCallIssue = "warning"
reportGeneralTypeIssues = "warning"
reportInconsistentOverload = "warning"
reportIndexIssue = "warning"
reportInvalidTypeArguments = "warning"
reportNoOverloadImplementation = "warning"
reportOperatorIssue = "warning"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportRedeclaration = "warning"
reportReturnType = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateImportUsage = "none"              # Flaky regarding "not exported"
reportUnboundVariable = "warning"
reportUnusedCoroutine = "none"                 # Handled by Ruff
reportUnusedExcept = "warning"
reportFunctionMemberAccess = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "warning"
reportOverlappingOverload = "warning"
reportPossiblyUnboundVariable = "warning"
reportConstantRedefinition = "none"
reportDeprecated = "warning"
reportDuplicateImport = "warning"
reportIncompleteStub = "warning"
reportInconsistentConstructor = "warning"
reportInvalidStubStatement = "warning"
reportMatchNotExhaustive = "warning"
reportMissingParameterType = "none"
reportMissingTypeArgument = "warning"
reportPrivateUsage = "none"                    # Ruff checks this well enough
reportTypeCommentUsage = "warning"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "none"                     # Handled by Ruff
reportUnusedImport = "none"                    # Handled by Ruff
reportUnusedFunction = "none"                  # Handled by Ruff
reportUnusedVariable = "none"                  # Handled by Ruff
reportUntypedBaseClass = "none"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "none"        # Often out of our control
reportUntypedNamedTuple = "warning"
# Default "none" in strict
reportCallInDefaultInitializer = "none"
reportImplicitOverride = "none"
reportImplicitStringConcatenation = "none"
reportImportCycles = "none"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "none"
reportShadowedImports = "none"
reportUninitializedInstanceVariable = "warning" # Ensure we define instance vars
reportUnnecessaryTypeIgnoreComment = "none"
reportUnusedCallResult = "none"

[tool.ruff]
cache-dir = ".cache/.ruff_cache"
extend-exclude = ["typings"]
fix = true
output-format = "grouped"
preview = true
show-fixes = true
src = [
  "src",
  "docs",
  "notebooks",
  "packages/_dev",
  "packages/_pipeline",
  "scripts",
  "tests",
]
[tool.ruff.lint]
fixable = ["ALL"]
select = [
  "ALL",  # Select all rules
  "D417", # Explicitly enable parameter check even when using Numpy docstrings
]
unfixable = [
  "PIE790", # Don't remove `pass`/`...`, overridden in pre-commit
]
extend-safe-fixes = [
  "F401", # Allow autofix for unused imports even in `__init__.py`
]
ignore = [
  "ANN",     # Don't require type annotations
  "ARG005",  # Allow unused lambda argument. For consistency across df pipelines.
  "C408",    # Allow dict calls
  "COM",     # Allow magic commas and magic missing commas
  "CPY001",  # Don't check for copyright
  "D10",     # Allow missing docstrings
  "DOC",     # Don't require documented returns, yields, exceptions, etc.
  "DTZ",     # Timezones are important, but only contextually necessary.
  "E501",    # Don't check line length. Black handles this.
  "EM",      # Don't check for exception message issues
  "ERA",     # False positives. Don't get rid of commented out code.
  "FBT",     # Allow boolean "traps"
  "FIX002",  # Allow TODOs
  "FLY002",  # Allow different string representations
  "FURB118", # Incorrectly applies `itemgetter`
  "FURB140", # Don't replace comprehensions with starmap
  "G0",      # Allow f-strings, etc. in Loguru logging
  "ICN",     # Don't require these ad-hoc "conventional" import names
  "INP001",  # False positives. Checks for packages missing `__init__.py`
  "ISC",     # False positives. Implicit string concatenation is fine.
  "PD009",   # Allow `df.iat`.
  "PD011",   # Allow use of `.values`. False positives.
  "PD013",   # Allow `stack` instead of `melt`. They're not a direct swap.
  "PD101",   # Allow use of nunique(). False positives
  "PD901",   # Allow `df` variable name. We are all consenting adults here.
  "PD011",   # Allow use of `.values`. False positives.
  "PLR6201", # Don't require set literal for membership checks
  "PGH003",  # Until black stops wrapping special ignores, let's allow bare
  "PIE804",  # Allow dict unpack even if unnecessary, consisent for df.assign{**...}
  "PLC0105", # Dont enforce Hungarian notation for `TypeVar` variance
  "PLC2701", # Allow private name imports
  "PLR0913", # Allow more than five function arguments
  "PLR0914", # Allow lots of local variables
  "PLR0917", # Allow more than five positional arguments
  "PLR1704", # Allow redefining arguments, often for sanitization
  "PLR2004", # Allow magic values. This check is too sensitive
  "PLR6201", # Don't require set literal for membership checks
  "PLR6301", # Allow methods that don't reference self, may be overridden
  "PLW0108", # Don't warn about unnecessary lambda. Often needed in pandas chains
  "PLW0642", # Allow reassignment to `cls` and `self`
  "PLW2901", # For loop variable
  "RET",     # Return checks are flaky, Sourcery does fine analysing these paths
  "S301",    # Don't warn about pickling.
  "S403",    # Don't warn about pickle-like modules.
  "S404",    # Don't warn about subprocess.
  "TC",      # Type checking linter doesn't play nicely with pydantic
  "TD",      # Disable to-do validation. Too pedantic for now.
  "TRY003",  # Allow long exception messages
  "W2",      # Allow whitespace issues. Fixed automatically by black.
]
[tool.ruff.lint.isort]
split-on-trailing-comma = false
[tool.ruff.format]
skip-magic-trailing-comma = true
[tool.ruff.lint.pydocstyle]
convention = "numpy"
[tool.ruff.lint.extend-per-file-ignores]
"**/*.ipynb" = [
  "B018", # Allow "useless" expressions, which do suppress outputs in notebooks
  "E703", # Allow semicolons to suppress outputs in notebooks
  "F821", # Allow undefined names, such as `display`
  "S101", # Allow assert
  "T201", # Allow print in notebooks
]
"packages/_dev/dev/tools/add_changes.py" = [
  "S603", # Allow shell expressions here
  "S607", # Allow shell expressions here
]
"docs/**.ipynb" = [
  "E402", # Need to allow imports below patches in docs notebooks
]
"tests/**" = [
  "ARG001", # Allow unused arguments
  "S101",   # Allow assert
  "SIM300", # Allow constants (expectations) on the RHS
  "SLF001", # Allow private member access in tests
]
"types.py" = [
  "A005", # Allow types modules that shadow a stdlib module
]
